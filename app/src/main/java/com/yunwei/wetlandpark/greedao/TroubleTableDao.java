package com.yunwei.wetlandpark.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yunwei.wetlandpark.greedao.TroubleTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TROUBLE_TABLE".
*/
public class TroubleTableDao extends AbstractDao<TroubleTable, Long> {

    public static final String TABLENAME = "TROUBLE_TABLE";

    /**
     * Properties of entity TroubleTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property UserID = new Property(2, String.class, "userID", false, "USER_ID");
        public final static Property TroubleType = new Property(3, String.class, "troubleType", false, "TROUBLE_TYPE");
        public final static Property TroubleDesc = new Property(4, String.class, "troubleDesc", false, "TROUBLE_DESC");
        public final static Property Lng = new Property(5, Double.class, "lng", false, "LNG");
        public final static Property Lat = new Property(6, Double.class, "lat", false, "LAT");
        public final static Property TroubleAddress = new Property(7, String.class, "troubleAddress", false, "TROUBLE_ADDRESS");
        public final static Property Time = new Property(8, Long.class, "time", false, "TIME");
        public final static Property Note = new Property(9, String.class, "note", false, "NOTE");
        public final static Property ImagesUrl = new Property(10, String.class, "imagesUrl", false, "IMAGES_URL");
        public final static Property LocalTag = new Property(11, Integer.class, "localTag", false, "LOCAL_TAG");
        public final static Property EmergencyLevel = new Property(12, Integer.class, "emergencyLevel", false, "EMERGENCY_LEVEL");
        public final static Property MissionID = new Property(13, String.class, "missionID", false, "MISSION_ID");
        public final static Property MissionPointID = new Property(14, String.class, "missionPointID", false, "MISSION_POINT_ID");
    };


    public TroubleTableDao(DaoConfig config) {
        super(config);
    }
    
    public TroubleTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TROUBLE_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"USER_ID\" TEXT," + // 2: userID
                "\"TROUBLE_TYPE\" TEXT," + // 3: troubleType
                "\"TROUBLE_DESC\" TEXT," + // 4: troubleDesc
                "\"LNG\" REAL," + // 5: lng
                "\"LAT\" REAL," + // 6: lat
                "\"TROUBLE_ADDRESS\" TEXT," + // 7: troubleAddress
                "\"TIME\" INTEGER," + // 8: time
                "\"NOTE\" TEXT," + // 9: note
                "\"IMAGES_URL\" TEXT," + // 10: imagesUrl
                "\"LOCAL_TAG\" INTEGER," + // 11: localTag
                "\"EMERGENCY_LEVEL\" INTEGER," + // 12: emergencyLevel
                "\"MISSION_ID\" TEXT," + // 13: missionID
                "\"MISSION_POINT_ID\" TEXT);"); // 14: missionPointID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TROUBLE_TABLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TroubleTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(3, userID);
        }
 
        String troubleType = entity.getTroubleType();
        if (troubleType != null) {
            stmt.bindString(4, troubleType);
        }
 
        String troubleDesc = entity.getTroubleDesc();
        if (troubleDesc != null) {
            stmt.bindString(5, troubleDesc);
        }
 
        Double lng = entity.getLng();
        if (lng != null) {
            stmt.bindDouble(6, lng);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(7, lat);
        }
 
        String troubleAddress = entity.getTroubleAddress();
        if (troubleAddress != null) {
            stmt.bindString(8, troubleAddress);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(9, time);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(10, note);
        }
 
        String imagesUrl = entity.getImagesUrl();
        if (imagesUrl != null) {
            stmt.bindString(11, imagesUrl);
        }
 
        Integer localTag = entity.getLocalTag();
        if (localTag != null) {
            stmt.bindLong(12, localTag);
        }
 
        Integer emergencyLevel = entity.getEmergencyLevel();
        if (emergencyLevel != null) {
            stmt.bindLong(13, emergencyLevel);
        }
 
        String missionID = entity.getMissionID();
        if (missionID != null) {
            stmt.bindString(14, missionID);
        }
 
        String missionPointID = entity.getMissionPointID();
        if (missionPointID != null) {
            stmt.bindString(15, missionPointID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TroubleTable readEntity(Cursor cursor, int offset) {
        TroubleTable entity = new TroubleTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // troubleType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // troubleDesc
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // lng
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // lat
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // troubleAddress
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // time
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // note
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // imagesUrl
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // localTag
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // emergencyLevel
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // missionID
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // missionPointID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TroubleTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTroubleType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTroubleDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLng(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setLat(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setTroubleAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setNote(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImagesUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLocalTag(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setEmergencyLevel(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setMissionID(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMissionPointID(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TroubleTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TroubleTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
