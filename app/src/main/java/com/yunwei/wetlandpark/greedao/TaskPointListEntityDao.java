package com.yunwei.wetlandpark.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "TASK_POINT_LIST_ENTITY".
*/
public class TaskPointListEntityDao extends AbstractDao<TaskPointListEntity, Long> {

    public static final String TABLENAME = "TASK_POINT_LIST_ENTITY";

    /**
     * Properties of entity TaskPointListEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TaskId = new Property(1, Integer.class, "TaskId", false, "TASK_ID");
        public final static Property TaskPointId = new Property(2, String.class, "TaskPointId", false, "TASK_POINT_ID");
        public final static Property TaskPointKind = new Property(3, Integer.class, "TaskPointKind", false, "TASK_POINT_KIND");
        public final static Property TaskPointStatus = new Property(4, Integer.class, "TaskPointStatus", false, "TASK_POINT_STATUS");
        public final static Property UserId = new Property(5, String.class, "UserId", false, "USER_ID");
        public final static Property TaskPointNo = new Property(6, String.class, "TaskPointNo", false, "TASK_POINT_NO");
        public final static Property TaskPointType = new Property(7, String.class, "TaskPointType", false, "TASK_POINT_TYPE");
        public final static Property TaskPointAddr = new Property(8, String.class, "TaskPointAddr", false, "TASK_POINT_ADDR");
        public final static Property Lng = new Property(9, Double.class, "Lng", false, "LNG");
        public final static Property Lat = new Property(10, Double.class, "Lat", false, "LAT");
        public final static Property Imgs = new Property(11, String.class, "Imgs", false, "IMGS");
        public final static Property IsCompleted = new Property(12, Boolean.class, "IsCompleted", false, "IS_COMPLETED");
        public final static Property Revint1 = new Property(13, Integer.class, "revint1", false, "REVINT1");
        public final static Property Revint2 = new Property(14, Integer.class, "revint2", false, "REVINT2");
        public final static Property Revint3 = new Property(15, Integer.class, "revint3", false, "REVINT3");
        public final static Property Revstr1 = new Property(16, String.class, "revstr1", false, "REVSTR1");
        public final static Property Revstr2 = new Property(17, String.class, "revstr2", false, "REVSTR2");
        public final static Property Revstr3 = new Property(18, String.class, "revstr3", false, "REVSTR3");
    };


    public TaskPointListEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TaskPointListEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_POINT_LIST_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TASK_ID\" INTEGER," + // 1: TaskId
                "\"TASK_POINT_ID\" TEXT," + // 2: TaskPointId
                "\"TASK_POINT_KIND\" INTEGER," + // 3: TaskPointKind
                "\"TASK_POINT_STATUS\" INTEGER," + // 4: TaskPointStatus
                "\"USER_ID\" TEXT," + // 5: UserId
                "\"TASK_POINT_NO\" TEXT," + // 6: TaskPointNo
                "\"TASK_POINT_TYPE\" TEXT," + // 7: TaskPointType
                "\"TASK_POINT_ADDR\" TEXT," + // 8: TaskPointAddr
                "\"LNG\" REAL," + // 9: Lng
                "\"LAT\" REAL," + // 10: Lat
                "\"IMGS\" TEXT," + // 11: Imgs
                "\"IS_COMPLETED\" INTEGER," + // 12: IsCompleted
                "\"REVINT1\" INTEGER," + // 13: revint1
                "\"REVINT2\" INTEGER," + // 14: revint2
                "\"REVINT3\" INTEGER," + // 15: revint3
                "\"REVSTR1\" TEXT," + // 16: revstr1
                "\"REVSTR2\" TEXT," + // 17: revstr2
                "\"REVSTR3\" TEXT);"); // 18: revstr3
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_POINT_LIST_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TaskPointListEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer TaskId = entity.getTaskId();
        if (TaskId != null) {
            stmt.bindLong(2, TaskId);
        }
 
        String TaskPointId = entity.getTaskPointId();
        if (TaskPointId != null) {
            stmt.bindString(3, TaskPointId);
        }
 
        Integer TaskPointKind = entity.getTaskPointKind();
        if (TaskPointKind != null) {
            stmt.bindLong(4, TaskPointKind);
        }
 
        Integer TaskPointStatus = entity.getTaskPointStatus();
        if (TaskPointStatus != null) {
            stmt.bindLong(5, TaskPointStatus);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(6, UserId);
        }
 
        String TaskPointNo = entity.getTaskPointNo();
        if (TaskPointNo != null) {
            stmt.bindString(7, TaskPointNo);
        }
 
        String TaskPointType = entity.getTaskPointType();
        if (TaskPointType != null) {
            stmt.bindString(8, TaskPointType);
        }
 
        String TaskPointAddr = entity.getTaskPointAddr();
        if (TaskPointAddr != null) {
            stmt.bindString(9, TaskPointAddr);
        }
 
        Double Lng = entity.getLng();
        if (Lng != null) {
            stmt.bindDouble(10, Lng);
        }
 
        Double Lat = entity.getLat();
        if (Lat != null) {
            stmt.bindDouble(11, Lat);
        }
 
        String Imgs = entity.getImgs();
        if (Imgs != null) {
            stmt.bindString(12, Imgs);
        }
 
        Boolean IsCompleted = entity.getCompleted();
        if (IsCompleted != null) {
            stmt.bindLong(13, IsCompleted ? 1L: 0L);
        }
 
        Integer revint1 = entity.getRevint1();
        if (revint1 != null) {
            stmt.bindLong(14, revint1);
        }
 
        Integer revint2 = entity.getRevint2();
        if (revint2 != null) {
            stmt.bindLong(15, revint2);
        }
 
        Integer revint3 = entity.getRevint3();
        if (revint3 != null) {
            stmt.bindLong(16, revint3);
        }
 
        String revstr1 = entity.getRevstr1();
        if (revstr1 != null) {
            stmt.bindString(17, revstr1);
        }
 
        String revstr2 = entity.getRevstr2();
        if (revstr2 != null) {
            stmt.bindString(18, revstr2);
        }
 
        String revstr3 = entity.getRevstr3();
        if (revstr3 != null) {
            stmt.bindString(19, revstr3);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TaskPointListEntity readEntity(Cursor cursor, int offset) {
        TaskPointListEntity entity = new TaskPointListEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // TaskId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // TaskPointId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // TaskPointKind
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // TaskPointStatus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // UserId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // TaskPointNo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // TaskPointType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // TaskPointAddr
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // Lng
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // Lat
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Imgs
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // IsCompleted
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // revint1
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // revint2
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // revint3
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // revstr1
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // revstr2
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // revstr3
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TaskPointListEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTaskId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTaskPointId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTaskPointKind(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTaskPointStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUserId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTaskPointNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTaskPointType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTaskPointAddr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLng(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setLat(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setImgs(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCompleted(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setRevint1(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setRevint2(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setRevint3(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setRevstr1(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setRevstr2(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRevstr3(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TaskPointListEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TaskPointListEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
