package com.yunwei.wetlandpark.greedao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.yunwei.wetlandpark.greedao.TrackDao;
import com.yunwei.wetlandpark.greedao.TrackPointDao;
import com.yunwei.wetlandpark.greedao.TrackPointsTableDao;
import com.yunwei.wetlandpark.greedao.DeviceTableDao;
import com.yunwei.wetlandpark.greedao.CheckPlanTableDao;
import com.yunwei.wetlandpark.greedao.MaintainDeviceTableDao;
import com.yunwei.wetlandpark.greedao.TaskListAndDetailEntityDao;
import com.yunwei.wetlandpark.greedao.TaskPointListEntityDao;
import com.yunwei.wetlandpark.greedao.PlanToInspectEntityDao;
import com.yunwei.wetlandpark.greedao.TroubleTableDao;
import com.yunwei.wetlandpark.greedao.TroubleShooterTableDao;
import com.yunwei.wetlandpark.greedao.SignInTableDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        TrackDao.createTable(db, ifNotExists);
        TrackPointDao.createTable(db, ifNotExists);
        TrackPointsTableDao.createTable(db, ifNotExists);
        DeviceTableDao.createTable(db, ifNotExists);
        CheckPlanTableDao.createTable(db, ifNotExists);
        MaintainDeviceTableDao.createTable(db, ifNotExists);
        TaskListAndDetailEntityDao.createTable(db, ifNotExists);
        TaskPointListEntityDao.createTable(db, ifNotExists);
        PlanToInspectEntityDao.createTable(db, ifNotExists);
        TroubleTableDao.createTable(db, ifNotExists);
        TroubleShooterTableDao.createTable(db, ifNotExists);
        SignInTableDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        TrackDao.dropTable(db, ifExists);
        TrackPointDao.dropTable(db, ifExists);
        TrackPointsTableDao.dropTable(db, ifExists);
        DeviceTableDao.dropTable(db, ifExists);
        CheckPlanTableDao.dropTable(db, ifExists);
        MaintainDeviceTableDao.dropTable(db, ifExists);
        TaskListAndDetailEntityDao.dropTable(db, ifExists);
        TaskPointListEntityDao.dropTable(db, ifExists);
        PlanToInspectEntityDao.dropTable(db, ifExists);
        TroubleTableDao.dropTable(db, ifExists);
        TroubleShooterTableDao.dropTable(db, ifExists);
        SignInTableDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(TrackDao.class);
        registerDaoClass(TrackPointDao.class);
        registerDaoClass(TrackPointsTableDao.class);
        registerDaoClass(DeviceTableDao.class);
        registerDaoClass(CheckPlanTableDao.class);
        registerDaoClass(MaintainDeviceTableDao.class);
        registerDaoClass(TaskListAndDetailEntityDao.class);
        registerDaoClass(TaskPointListEntityDao.class);
        registerDaoClass(PlanToInspectEntityDao.class);
        registerDaoClass(TroubleTableDao.class);
        registerDaoClass(TroubleShooterTableDao.class);
        registerDaoClass(SignInTableDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
