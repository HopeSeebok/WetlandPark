package com.yunwei.wetlandpark.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yunwei.wetlandpark.greedao.Track;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRACK".
*/
public class TrackDao extends AbstractDao<Track, Long> {

    public static final String TABLENAME = "TRACK";

    /**
     * Properties of entity Track.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TId = new Property(1, Long.class, "tId", false, "T_ID");
        public final static Property StartTime = new Property(2, Long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(3, Long.class, "endTime", false, "END_TIME");
        public final static Property Distance = new Property(4, Double.class, "distance", false, "DISTANCE");
        public final static Property State = new Property(5, Integer.class, "state", false, "STATE");
        public final static Property Remark = new Property(6, String.class, "remark", false, "REMARK");
        public final static Property Resume = new Property(7, String.class, "resume", false, "RESUME");
        public final static Property Pause = new Property(8, String.class, "pause", false, "PAUSE");
        public final static Property Revint1 = new Property(9, Integer.class, "revint1", false, "REVINT1");
        public final static Property Revint2 = new Property(10, Integer.class, "revint2", false, "REVINT2");
        public final static Property Revint3 = new Property(11, Integer.class, "revint3", false, "REVINT3");
        public final static Property Revstr1 = new Property(12, String.class, "revstr1", false, "REVSTR1");
        public final static Property Revstr2 = new Property(13, String.class, "revstr2", false, "REVSTR2");
        public final static Property Revstr3 = new Property(14, String.class, "revstr3", false, "REVSTR3");
    };


    public TrackDao(DaoConfig config) {
        super(config);
    }
    
    public TrackDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRACK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"T_ID\" INTEGER," + // 1: tId
                "\"START_TIME\" INTEGER," + // 2: startTime
                "\"END_TIME\" INTEGER," + // 3: endTime
                "\"DISTANCE\" REAL," + // 4: distance
                "\"STATE\" INTEGER," + // 5: state
                "\"REMARK\" TEXT," + // 6: remark
                "\"RESUME\" TEXT," + // 7: resume
                "\"PAUSE\" TEXT," + // 8: pause
                "\"REVINT1\" INTEGER," + // 9: revint1
                "\"REVINT2\" INTEGER," + // 10: revint2
                "\"REVINT3\" INTEGER," + // 11: revint3
                "\"REVSTR1\" TEXT," + // 12: revstr1
                "\"REVSTR2\" TEXT," + // 13: revstr2
                "\"REVSTR3\" TEXT);"); // 14: revstr3
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRACK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Track entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long tId = entity.getTId();
        if (tId != null) {
            stmt.bindLong(2, tId);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(3, startTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(4, endTime);
        }
 
        Double distance = entity.getDistance();
        if (distance != null) {
            stmt.bindDouble(5, distance);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(6, state);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        String resume = entity.getResume();
        if (resume != null) {
            stmt.bindString(8, resume);
        }
 
        String pause = entity.getPause();
        if (pause != null) {
            stmt.bindString(9, pause);
        }
 
        Integer revint1 = entity.getRevint1();
        if (revint1 != null) {
            stmt.bindLong(10, revint1);
        }
 
        Integer revint2 = entity.getRevint2();
        if (revint2 != null) {
            stmt.bindLong(11, revint2);
        }
 
        Integer revint3 = entity.getRevint3();
        if (revint3 != null) {
            stmt.bindLong(12, revint3);
        }
 
        String revstr1 = entity.getRevstr1();
        if (revstr1 != null) {
            stmt.bindString(13, revstr1);
        }
 
        String revstr2 = entity.getRevstr2();
        if (revstr2 != null) {
            stmt.bindString(14, revstr2);
        }
 
        String revstr3 = entity.getRevstr3();
        if (revstr3 != null) {
            stmt.bindString(15, revstr3);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Track readEntity(Cursor cursor, int offset) {
        Track entity = new Track( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // tId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // startTime
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // endTime
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // distance
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // state
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // remark
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // resume
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pause
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // revint1
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // revint2
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // revint3
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // revstr1
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // revstr2
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // revstr3
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Track entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStartTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setEndTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setDistance(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setState(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setResume(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPause(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRevint1(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setRevint2(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setRevint3(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setRevstr1(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRevstr2(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRevstr3(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Track entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Track entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
