package com.yunwei.wetlandpark.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yunwei.wetlandpark.greedao.SignInTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SIGN_IN_TABLE".
*/
public class SignInTableDao extends AbstractDao<SignInTable, Long> {

    public static final String TABLENAME = "SIGN_IN_TABLE";

    /**
     * Properties of entity SignInTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property UserID = new Property(2, String.class, "userID", false, "USER_ID");
        public final static Property Code = new Property(3, String.class, "code", false, "CODE");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property Lng = new Property(5, Double.class, "lng", false, "LNG");
        public final static Property Lat = new Property(6, Double.class, "lat", false, "LAT");
        public final static Property Time = new Property(7, Long.class, "time", false, "TIME");
        public final static Property Note = new Property(8, String.class, "note", false, "NOTE");
        public final static Property Test = new Property(9, String.class, "test", false, "TEST");
    };


    public SignInTableDao(DaoConfig config) {
        super(config);
    }
    
    public SignInTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SIGN_IN_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"USER_ID\" TEXT," + // 2: userID
                "\"CODE\" TEXT," + // 3: code
                "\"ADDRESS\" TEXT," + // 4: address
                "\"LNG\" REAL," + // 5: lng
                "\"LAT\" REAL," + // 6: lat
                "\"TIME\" INTEGER," + // 7: time
                "\"NOTE\" TEXT," + // 8: note
                "\"TEST\" TEXT);"); // 9: test
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SIGN_IN_TABLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SignInTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(3, userID);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        Double lng = entity.getLng();
        if (lng != null) {
            stmt.bindDouble(6, lng);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(7, lat);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(8, time);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(9, note);
        }
 
        String test = entity.getTest();
        if (test != null) {
            stmt.bindString(10, test);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SignInTable readEntity(Cursor cursor, int offset) {
        SignInTable entity = new SignInTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // lng
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // lat
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // note
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // test
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SignInTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLng(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setLat(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setNote(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTest(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SignInTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SignInTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
