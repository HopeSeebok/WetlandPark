package com.yunwei.wetlandpark.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yunwei.wetlandpark.greedao.TrackPointsTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRACK_POINTS_TABLE".
*/
public class TrackPointsTableDao extends AbstractDao<TrackPointsTable, Long> {

    public static final String TABLENAME = "TRACK_POINTS_TABLE";

    /**
     * Properties of entity TrackPointsTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Distance = new Property(1, Double.class, "distance", false, "DISTANCE");
        public final static Property CacheID = new Property(2, String.class, "cacheID", false, "CACHE_ID");
        public final static Property Points = new Property(3, String.class, "points", false, "POINTS");
    };


    public TrackPointsTableDao(DaoConfig config) {
        super(config);
    }
    
    public TrackPointsTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRACK_POINTS_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DISTANCE\" REAL," + // 1: distance
                "\"CACHE_ID\" TEXT," + // 2: cacheID
                "\"POINTS\" TEXT);"); // 3: points
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRACK_POINTS_TABLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TrackPointsTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double distance = entity.getDistance();
        if (distance != null) {
            stmt.bindDouble(2, distance);
        }
 
        String cacheID = entity.getCacheID();
        if (cacheID != null) {
            stmt.bindString(3, cacheID);
        }
 
        String points = entity.getPoints();
        if (points != null) {
            stmt.bindString(4, points);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TrackPointsTable readEntity(Cursor cursor, int offset) {
        TrackPointsTable entity = new TrackPointsTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // distance
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cacheID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // points
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TrackPointsTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDistance(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setCacheID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPoints(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TrackPointsTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TrackPointsTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
