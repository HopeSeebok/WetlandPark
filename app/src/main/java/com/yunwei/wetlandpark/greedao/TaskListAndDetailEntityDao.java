package com.yunwei.wetlandpark.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "TASK_LIST_AND_DETAIL_ENTITY".
*/
public class TaskListAndDetailEntityDao extends AbstractDao<TaskListAndDetailEntity, Long> {

    public static final String TABLENAME = "TASK_LIST_AND_DETAIL_ENTITY";

    /**
     * Properties of entity TaskListAndDetailEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TaskId = new Property(1, Integer.class, "TaskId", false, "TASK_ID");
        public final static Property TaskType = new Property(2, Integer.class, "TaskType", false, "TASK_TYPE");
        public final static Property TaskFormType = new Property(3, Integer.class, "TaskFormType", false, "TASK_FORM_TYPE");
        public final static Property TaskMold = new Property(4, Integer.class, "TaskMold", false, "TASK_MOLD");
        public final static Property TaskStatus = new Property(5, Integer.class, "TaskStatus", false, "TASK_STATUS");
        public final static Property TaskLevel = new Property(6, Integer.class, "TaskLevel", false, "TASK_LEVEL");
        public final static Property Expires = new Property(7, Integer.class, "Expires", false, "EXPIRES");
        public final static Property UserId = new Property(8, String.class, "UserId", false, "USER_ID");
        public final static Property TaskNote = new Property(9, String.class, "TaskNote", false, "TASK_NOTE");
        public final static Property OrderPeople = new Property(10, String.class, "OrderPeople", false, "ORDER_PEOPLE");
        public final static Property Excutor = new Property(11, String.class, "Excutor", false, "EXCUTOR");
        public final static Property TaskRemark = new Property(12, String.class, "TaskRemark", false, "TASK_REMARK");
        public final static Property TaskDeviceNos = new Property(13, String.class, "TaskDeviceNos", false, "TASK_DEVICE_NOS");
        public final static Property ProcessingTime = new Property(14, String.class, "ProcessingTime", false, "PROCESSING_TIME");
        public final static Property AuditTime = new Property(15, String.class, "AuditTime", false, "AUDIT_TIME");
        public final static Property FinishTime = new Property(16, String.class, "FinishTime", false, "FINISH_TIME");
        public final static Property EndTime = new Property(17, String.class, "EndTime", false, "END_TIME");
        public final static Property IsHistory = new Property(18, Boolean.class, "IsHistory", false, "IS_HISTORY");
        public final static Property HistoryTime = new Property(19, String.class, "HistoryTime", false, "HISTORY_TIME");
        public final static Property Revint1 = new Property(20, Integer.class, "revint1", false, "REVINT1");
        public final static Property Revint2 = new Property(21, Integer.class, "revint2", false, "REVINT2");
        public final static Property Revint3 = new Property(22, Integer.class, "revint3", false, "REVINT3");
        public final static Property Revstr1 = new Property(23, String.class, "revstr1", false, "REVSTR1");
        public final static Property Revstr2 = new Property(24, String.class, "revstr2", false, "REVSTR2");
        public final static Property Revstr3 = new Property(25, String.class, "revstr3", false, "REVSTR3");
    };


    public TaskListAndDetailEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TaskListAndDetailEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_LIST_AND_DETAIL_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TASK_ID\" INTEGER," + // 1: TaskId
                "\"TASK_TYPE\" INTEGER," + // 2: TaskType
                "\"TASK_FORM_TYPE\" INTEGER," + // 3: TaskFormType
                "\"TASK_MOLD\" INTEGER," + // 4: TaskMold
                "\"TASK_STATUS\" INTEGER," + // 5: TaskStatus
                "\"TASK_LEVEL\" INTEGER," + // 6: TaskLevel
                "\"EXPIRES\" INTEGER," + // 7: Expires
                "\"USER_ID\" TEXT," + // 8: UserId
                "\"TASK_NOTE\" TEXT," + // 9: TaskNote
                "\"ORDER_PEOPLE\" TEXT," + // 10: OrderPeople
                "\"EXCUTOR\" TEXT," + // 11: Excutor
                "\"TASK_REMARK\" TEXT," + // 12: TaskRemark
                "\"TASK_DEVICE_NOS\" TEXT," + // 13: TaskDeviceNos
                "\"PROCESSING_TIME\" TEXT," + // 14: ProcessingTime
                "\"AUDIT_TIME\" TEXT," + // 15: AuditTime
                "\"FINISH_TIME\" TEXT," + // 16: FinishTime
                "\"END_TIME\" TEXT," + // 17: EndTime
                "\"IS_HISTORY\" INTEGER," + // 18: IsHistory
                "\"HISTORY_TIME\" TEXT," + // 19: HistoryTime
                "\"REVINT1\" INTEGER," + // 20: revint1
                "\"REVINT2\" INTEGER," + // 21: revint2
                "\"REVINT3\" INTEGER," + // 22: revint3
                "\"REVSTR1\" TEXT," + // 23: revstr1
                "\"REVSTR2\" TEXT," + // 24: revstr2
                "\"REVSTR3\" TEXT);"); // 25: revstr3
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_LIST_AND_DETAIL_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TaskListAndDetailEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer TaskId = entity.getTaskId();
        if (TaskId != null) {
            stmt.bindLong(2, TaskId);
        }
 
        Integer TaskType = entity.getTaskType();
        if (TaskType != null) {
            stmt.bindLong(3, TaskType);
        }
 
        Integer TaskFormType = entity.getTaskFormType();
        if (TaskFormType != null) {
            stmt.bindLong(4, TaskFormType);
        }
 
        Integer TaskMold = entity.getTaskMold();
        if (TaskMold != null) {
            stmt.bindLong(5, TaskMold);
        }
 
        Integer TaskStatus = entity.getTaskStatus();
        if (TaskStatus != null) {
            stmt.bindLong(6, TaskStatus);
        }
 
        Integer TaskLevel = entity.getTaskLevel();
        if (TaskLevel != null) {
            stmt.bindLong(7, TaskLevel);
        }
 
        Integer Expires = entity.getExpires();
        if (Expires != null) {
            stmt.bindLong(8, Expires);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(9, UserId);
        }
 
        String TaskNote = entity.getTaskNote();
        if (TaskNote != null) {
            stmt.bindString(10, TaskNote);
        }
 
        String OrderPeople = entity.getOrderPeople();
        if (OrderPeople != null) {
            stmt.bindString(11, OrderPeople);
        }
 
        String Excutor = entity.getExcutor();
        if (Excutor != null) {
            stmt.bindString(12, Excutor);
        }
 
        String TaskRemark = entity.getTaskRemark();
        if (TaskRemark != null) {
            stmt.bindString(13, TaskRemark);
        }
 
        String TaskDeviceNos = entity.getTaskDeviceNos();
        if (TaskDeviceNos != null) {
            stmt.bindString(14, TaskDeviceNos);
        }
 
        String ProcessingTime = entity.getProcessingTime();
        if (ProcessingTime != null) {
            stmt.bindString(15, ProcessingTime);
        }
 
        String AuditTime = entity.getAuditTime();
        if (AuditTime != null) {
            stmt.bindString(16, AuditTime);
        }
 
        String FinishTime = entity.getFinishTime();
        if (FinishTime != null) {
            stmt.bindString(17, FinishTime);
        }
 
        String EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindString(18, EndTime);
        }
 
        Boolean IsHistory = entity.getHistory();
        if (IsHistory != null) {
            stmt.bindLong(19, IsHistory ? 1L: 0L);
        }
 
        String HistoryTime = entity.getHistoryTime();
        if (HistoryTime != null) {
            stmt.bindString(20, HistoryTime);
        }
 
        Integer revint1 = entity.getRevint1();
        if (revint1 != null) {
            stmt.bindLong(21, revint1);
        }
 
        Integer revint2 = entity.getRevint2();
        if (revint2 != null) {
            stmt.bindLong(22, revint2);
        }
 
        Integer revint3 = entity.getRevint3();
        if (revint3 != null) {
            stmt.bindLong(23, revint3);
        }
 
        String revstr1 = entity.getRevstr1();
        if (revstr1 != null) {
            stmt.bindString(24, revstr1);
        }
 
        String revstr2 = entity.getRevstr2();
        if (revstr2 != null) {
            stmt.bindString(25, revstr2);
        }
 
        String revstr3 = entity.getRevstr3();
        if (revstr3 != null) {
            stmt.bindString(26, revstr3);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TaskListAndDetailEntity readEntity(Cursor cursor, int offset) {
        TaskListAndDetailEntity entity = new TaskListAndDetailEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // TaskId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // TaskType
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // TaskFormType
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // TaskMold
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // TaskStatus
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // TaskLevel
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // Expires
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // UserId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // TaskNote
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // OrderPeople
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Excutor
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // TaskRemark
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // TaskDeviceNos
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ProcessingTime
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // AuditTime
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // FinishTime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // EndTime
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // IsHistory
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // HistoryTime
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // revint1
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // revint2
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // revint3
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // revstr1
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // revstr2
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25) // revstr3
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TaskListAndDetailEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTaskId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTaskType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTaskFormType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTaskMold(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTaskStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTaskLevel(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setExpires(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setUserId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTaskNote(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOrderPeople(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setExcutor(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTaskRemark(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTaskDeviceNos(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setProcessingTime(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAuditTime(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFinishTime(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setEndTime(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setHistory(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setHistoryTime(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setRevint1(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setRevint2(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setRevint3(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setRevstr1(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setRevstr2(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setRevstr3(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TaskListAndDetailEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TaskListAndDetailEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
