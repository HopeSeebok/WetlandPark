package com.yunwei.wetlandpark.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yunwei.wetlandpark.greedao.CheckPlanTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECK_PLAN_TABLE".
*/
public class CheckPlanTableDao extends AbstractDao<CheckPlanTable, Long> {

    public static final String TABLENAME = "CHECK_PLAN_TABLE";

    /**
     * Properties of entity CheckPlanTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PlanID = new Property(1, String.class, "planID", false, "PLAN_ID");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property StartAt = new Property(3, String.class, "startAt", false, "START_AT");
        public final static Property EndAt = new Property(4, String.class, "endAt", false, "END_AT");
        public final static Property FirstSecondRoomTemp = new Property(5, String.class, "firstSecondRoomTemp", false, "FIRST_SECOND_ROOM_TEMP");
        public final static Property FirstSecondRoomHum = new Property(6, String.class, "firstSecondRoomHum", false, "FIRST_SECOND_ROOM_HUM");
        public final static Property ThirdRoomTemp = new Property(7, String.class, "thirdRoomTemp", false, "THIRD_ROOM_TEMP");
        public final static Property ThirdRoomHum = new Property(8, String.class, "thirdRoomHum", false, "THIRD_ROOM_HUM");
        public final static Property FirefightingSystem = new Property(9, String.class, "firefightingSystem", false, "FIREFIGHTING_SYSTEM");
        public final static Property UsbRoom = new Property(10, String.class, "usbRoom", false, "USB_ROOM");
        public final static Property AirConditioner = new Property(11, String.class, "airConditioner", false, "AIR_CONDITIONER");
        public final static Property CompensationMeter = new Property(12, String.class, "compensationMeter", false, "COMPENSATION_METER");
        public final static Property DistributionRoom = new Property(13, String.class, "distributionRoom", false, "DISTRIBUTION_ROOM");
        public final static Property CoreRouter = new Property(14, String.class, "coreRouter", false, "CORE_ROUTER");
        public final static Property AccessSystem = new Property(15, String.class, "accessSystem", false, "ACCESS_SYSTEM");
        public final static Property Note = new Property(16, String.class, "note", false, "NOTE");
        public final static Property CheckedPointCount = new Property(17, String.class, "checkedPointCount", false, "CHECKED_POINT_COUNT");
        public final static Property CheckedUser = new Property(18, String.class, "checkedUser", false, "CHECKED_USER");
    };


    public CheckPlanTableDao(DaoConfig config) {
        super(config);
    }
    
    public CheckPlanTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECK_PLAN_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PLAN_ID\" TEXT," + // 1: planID
                "\"DATE\" TEXT," + // 2: date
                "\"START_AT\" TEXT," + // 3: startAt
                "\"END_AT\" TEXT," + // 4: endAt
                "\"FIRST_SECOND_ROOM_TEMP\" TEXT," + // 5: firstSecondRoomTemp
                "\"FIRST_SECOND_ROOM_HUM\" TEXT," + // 6: firstSecondRoomHum
                "\"THIRD_ROOM_TEMP\" TEXT," + // 7: thirdRoomTemp
                "\"THIRD_ROOM_HUM\" TEXT," + // 8: thirdRoomHum
                "\"FIREFIGHTING_SYSTEM\" TEXT," + // 9: firefightingSystem
                "\"USB_ROOM\" TEXT," + // 10: usbRoom
                "\"AIR_CONDITIONER\" TEXT," + // 11: airConditioner
                "\"COMPENSATION_METER\" TEXT," + // 12: compensationMeter
                "\"DISTRIBUTION_ROOM\" TEXT," + // 13: distributionRoom
                "\"CORE_ROUTER\" TEXT," + // 14: coreRouter
                "\"ACCESS_SYSTEM\" TEXT," + // 15: accessSystem
                "\"NOTE\" TEXT," + // 16: note
                "\"CHECKED_POINT_COUNT\" TEXT," + // 17: checkedPointCount
                "\"CHECKED_USER\" TEXT);"); // 18: checkedUser
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECK_PLAN_TABLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CheckPlanTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String planID = entity.getPlanID();
        if (planID != null) {
            stmt.bindString(2, planID);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String startAt = entity.getStartAt();
        if (startAt != null) {
            stmt.bindString(4, startAt);
        }
 
        String endAt = entity.getEndAt();
        if (endAt != null) {
            stmt.bindString(5, endAt);
        }
 
        String firstSecondRoomTemp = entity.getFirstSecondRoomTemp();
        if (firstSecondRoomTemp != null) {
            stmt.bindString(6, firstSecondRoomTemp);
        }
 
        String firstSecondRoomHum = entity.getFirstSecondRoomHum();
        if (firstSecondRoomHum != null) {
            stmt.bindString(7, firstSecondRoomHum);
        }
 
        String thirdRoomTemp = entity.getThirdRoomTemp();
        if (thirdRoomTemp != null) {
            stmt.bindString(8, thirdRoomTemp);
        }
 
        String thirdRoomHum = entity.getThirdRoomHum();
        if (thirdRoomHum != null) {
            stmt.bindString(9, thirdRoomHum);
        }
 
        String firefightingSystem = entity.getFirefightingSystem();
        if (firefightingSystem != null) {
            stmt.bindString(10, firefightingSystem);
        }
 
        String usbRoom = entity.getUsbRoom();
        if (usbRoom != null) {
            stmt.bindString(11, usbRoom);
        }
 
        String airConditioner = entity.getAirConditioner();
        if (airConditioner != null) {
            stmt.bindString(12, airConditioner);
        }
 
        String compensationMeter = entity.getCompensationMeter();
        if (compensationMeter != null) {
            stmt.bindString(13, compensationMeter);
        }
 
        String distributionRoom = entity.getDistributionRoom();
        if (distributionRoom != null) {
            stmt.bindString(14, distributionRoom);
        }
 
        String coreRouter = entity.getCoreRouter();
        if (coreRouter != null) {
            stmt.bindString(15, coreRouter);
        }
 
        String accessSystem = entity.getAccessSystem();
        if (accessSystem != null) {
            stmt.bindString(16, accessSystem);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(17, note);
        }
 
        String checkedPointCount = entity.getCheckedPointCount();
        if (checkedPointCount != null) {
            stmt.bindString(18, checkedPointCount);
        }
 
        String checkedUser = entity.getCheckedUser();
        if (checkedUser != null) {
            stmt.bindString(19, checkedUser);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CheckPlanTable readEntity(Cursor cursor, int offset) {
        CheckPlanTable entity = new CheckPlanTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // planID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // startAt
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // endAt
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // firstSecondRoomTemp
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // firstSecondRoomHum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // thirdRoomTemp
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // thirdRoomHum
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // firefightingSystem
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // usbRoom
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // airConditioner
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // compensationMeter
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // distributionRoom
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // coreRouter
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // accessSystem
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // note
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // checkedPointCount
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // checkedUser
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CheckPlanTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlanID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartAt(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEndAt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFirstSecondRoomTemp(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFirstSecondRoomHum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setThirdRoomTemp(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setThirdRoomHum(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFirefightingSystem(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUsbRoom(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAirConditioner(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCompensationMeter(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDistributionRoom(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCoreRouter(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAccessSystem(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setNote(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCheckedPointCount(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCheckedUser(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CheckPlanTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CheckPlanTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
