package com.yunwei.wetlandpark.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECKING_FORM".
*/
public class CheckingFormDao extends AbstractDao<CheckingForm, Void> {

    public static final String TABLENAME = "CHECKING_FORM";

    /**
     * Properties of entity CheckingForm.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property RecordType = new Property(0, Integer.class, "RecordType", false, "RECORD_TYPE");
        public final static Property TaskId = new Property(1, String.class, "TaskId", false, "TASK_ID");
        public final static Property TaskPointTid = new Property(2, String.class, "TaskPointTid", false, "TASK_POINT_TID");
        public final static Property Remark = new Property(3, String.class, "Remark", false, "REMARK");
        public final static Property Status = new Property(4, Integer.class, "Status", false, "STATUS");
        public final static Property Reason = new Property(5, String.class, "Reason", false, "REASON");
        public final static Property Result = new Property(6, String.class, "Result", false, "RESULT");
        public final static Property FacilityCode = new Property(7, String.class, "FacilityCode", false, "FACILITY_CODE");
        public final static Property Address = new Property(8, String.class, "Address", false, "ADDRESS");
        public final static Property X = new Property(9, Double.class, "X", false, "X");
        public final static Property Y = new Property(10, Double.class, "Y", false, "Y");
        public final static Property Z = new Property(11, Double.class, "Z", false, "Z");
        public final static Property Lng = new Property(12, Double.class, "Lng", false, "LNG");
        public final static Property Lat = new Property(13, Double.class, "Lat", false, "LAT");
        public final static Property AttrJson = new Property(14, String.class, "AttrJson", false, "ATTR_JSON");
        public final static Property ImagesUrl = new Property(15, String.class, "ImagesUrl", false, "IMAGES_URL");
        public final static Property SaveTime = new Property(16, Long.class, "saveTime", false, "SAVE_TIME");
    };


    public CheckingFormDao(DaoConfig config) {
        super(config);
    }
    
    public CheckingFormDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECKING_FORM\" (" + //
                "\"RECORD_TYPE\" INTEGER," + // 0: RecordType
                "\"TASK_ID\" TEXT," + // 1: TaskId
                "\"TASK_POINT_TID\" TEXT," + // 2: TaskPointTid
                "\"REMARK\" TEXT," + // 3: Remark
                "\"STATUS\" INTEGER," + // 4: Status
                "\"REASON\" TEXT," + // 5: Reason
                "\"RESULT\" TEXT," + // 6: Result
                "\"FACILITY_CODE\" TEXT," + // 7: FacilityCode
                "\"ADDRESS\" TEXT," + // 8: Address
                "\"X\" REAL," + // 9: X
                "\"Y\" REAL," + // 10: Y
                "\"Z\" REAL," + // 11: Z
                "\"LNG\" REAL," + // 12: Lng
                "\"LAT\" REAL," + // 13: Lat
                "\"ATTR_JSON\" TEXT," + // 14: AttrJson
                "\"IMAGES_URL\" TEXT," + // 15: ImagesUrl
                "\"SAVE_TIME\" INTEGER);"); // 16: saveTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECKING_FORM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CheckingForm entity) {
        stmt.clearBindings();
 
        Integer RecordType = entity.getRecordType();
        if (RecordType != null) {
            stmt.bindLong(1, RecordType);
        }
 
        String TaskId = entity.getTaskId();
        if (TaskId != null) {
            stmt.bindString(2, TaskId);
        }
 
        String TaskPointTid = entity.getTaskPointTid();
        if (TaskPointTid != null) {
            stmt.bindString(3, TaskPointTid);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(4, Remark);
        }
 
        Integer Status = entity.getStatus();
        if (Status != null) {
            stmt.bindLong(5, Status);
        }
 
        String Reason = entity.getReason();
        if (Reason != null) {
            stmt.bindString(6, Reason);
        }
 
        String Result = entity.getResult();
        if (Result != null) {
            stmt.bindString(7, Result);
        }
 
        String FacilityCode = entity.getFacilityCode();
        if (FacilityCode != null) {
            stmt.bindString(8, FacilityCode);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(9, Address);
        }
 
        Double X = entity.getX();
        if (X != null) {
            stmt.bindDouble(10, X);
        }
 
        Double Y = entity.getY();
        if (Y != null) {
            stmt.bindDouble(11, Y);
        }
 
        Double Z = entity.getZ();
        if (Z != null) {
            stmt.bindDouble(12, Z);
        }
 
        Double Lng = entity.getLng();
        if (Lng != null) {
            stmt.bindDouble(13, Lng);
        }
 
        Double Lat = entity.getLat();
        if (Lat != null) {
            stmt.bindDouble(14, Lat);
        }
 
        String AttrJson = entity.getAttrJson();
        if (AttrJson != null) {
            stmt.bindString(15, AttrJson);
        }
 
        String ImagesUrl = entity.getImagesUrl();
        if (ImagesUrl != null) {
            stmt.bindString(16, ImagesUrl);
        }
 
        Long saveTime = entity.getSaveTime();
        if (saveTime != null) {
            stmt.bindLong(17, saveTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public CheckingForm readEntity(Cursor cursor, int offset) {
        CheckingForm entity = new CheckingForm( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // RecordType
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TaskId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // TaskPointTid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Remark
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Reason
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Result
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FacilityCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Address
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // X
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // Y
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // Z
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // Lng
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // Lat
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // AttrJson
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // ImagesUrl
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16) // saveTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CheckingForm entity, int offset) {
        entity.setRecordType(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setTaskId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTaskPointTid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRemark(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setReason(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setResult(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFacilityCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setX(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setY(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setZ(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setLng(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setLat(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setAttrJson(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setImagesUrl(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSaveTime(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(CheckingForm entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(CheckingForm entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
