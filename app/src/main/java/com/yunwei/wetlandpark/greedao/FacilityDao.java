package com.yunwei.wetlandpark.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FACILITY".
*/
public class FacilityDao extends AbstractDao<Facility, Long> {

    public static final String TABLENAME = "FACILITY";

    /**
     * Properties of entity Facility.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Guid = new Property(1, String.class, "guid", false, "GUID");
        public final static Property Code = new Property(2, String.class, "code", false, "CODE");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property OldCode = new Property(4, String.class, "oldCode", false, "OLD_CODE");
        public final static Property Category = new Property(5, String.class, "category", false, "CATEGORY");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property CreateTime = new Property(7, String.class, "createTime", false, "CREATE_TIME");
        public final static Property UserID = new Property(8, Integer.class, "userID", false, "USER_ID");
        public final static Property UserName = new Property(9, String.class, "userName", false, "USER_NAME");
        public final static Property UnitID = new Property(10, Integer.class, "unitID", false, "UNIT_ID");
        public final static Property X = new Property(11, Double.class, "x", false, "X");
        public final static Property Y = new Property(12, Double.class, "y", false, "Y");
        public final static Property AddrCode = new Property(13, String.class, "addrCode", false, "ADDR_CODE");
        public final static Property LampCode = new Property(14, String.class, "lampCode", false, "LAMP_CODE");
        public final static Property OwnerPolice = new Property(15, String.class, "ownerPolice", false, "OWNER_POLICE");
        public final static Property MonitorCode = new Property(16, String.class, "monitorCode", false, "MONITOR_CODE");
        public final static Property Owner = new Property(17, String.class, "owner", false, "OWNER");
        public final static Property OwnerOffice = new Property(18, String.class, "ownerOffice", false, "OWNER_OFFICE");
        public final static Property Description = new Property(19, String.class, "description", false, "DESCRIPTION");
        public final static Property Height = new Property(20, Integer.class, "height", false, "HEIGHT");
        public final static Property ZoneID = new Property(21, Integer.class, "zoneID", false, "ZONE_ID");
        public final static Property ZoneName = new Property(22, String.class, "zoneName", false, "ZONE_NAME");
        public final static Property Remark = new Property(23, String.class, "remark", false, "REMARK");
        public final static Property Images = new Property(24, String.class, "images", false, "IMAGES");
        public final static Property Status = new Property(25, String.class, "status", false, "STATUS");
        public final static Property State = new Property(26, Integer.class, "state", false, "STATE");
        public final static Property ObjectID = new Property(27, Integer.class, "objectID", false, "OBJECT_ID");
        public final static Property PointId = new Property(28, Integer.class, "pointId", false, "POINT_ID");
        public final static Property TaskId = new Property(29, String.class, "taskId", false, "TASK_ID");
        public final static Property TaskPointId = new Property(30, String.class, "taskPointId", false, "TASK_POINT_ID");
        public final static Property HdType = new Property(31, String.class, "hdType", false, "HD_TYPE");
        public final static Property HdDesc = new Property(32, String.class, "hdDesc", false, "HD_DESC");
        public final static Property RevInt1 = new Property(33, Integer.class, "revInt1", false, "REV_INT1");
        public final static Property RevInt2 = new Property(34, Integer.class, "revInt2", false, "REV_INT2");
        public final static Property RevString1 = new Property(35, String.class, "revString1", false, "REV_STRING1");
        public final static Property RevString2 = new Property(36, String.class, "revString2", false, "REV_STRING2");
    };


    public FacilityDao(DaoConfig config) {
        super(config);
    }
    
    public FacilityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FACILITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"GUID\" TEXT," + // 1: guid
                "\"CODE\" TEXT," + // 2: code
                "\"ADDRESS\" TEXT," + // 3: address
                "\"OLD_CODE\" TEXT," + // 4: oldCode
                "\"CATEGORY\" TEXT," + // 5: category
                "\"TYPE\" TEXT NOT NULL ," + // 6: type
                "\"CREATE_TIME\" TEXT," + // 7: createTime
                "\"USER_ID\" INTEGER," + // 8: userID
                "\"USER_NAME\" TEXT," + // 9: userName
                "\"UNIT_ID\" INTEGER," + // 10: unitID
                "\"X\" REAL," + // 11: x
                "\"Y\" REAL," + // 12: y
                "\"ADDR_CODE\" TEXT," + // 13: addrCode
                "\"LAMP_CODE\" TEXT," + // 14: lampCode
                "\"OWNER_POLICE\" TEXT," + // 15: ownerPolice
                "\"MONITOR_CODE\" TEXT," + // 16: monitorCode
                "\"OWNER\" TEXT," + // 17: owner
                "\"OWNER_OFFICE\" TEXT," + // 18: ownerOffice
                "\"DESCRIPTION\" TEXT," + // 19: description
                "\"HEIGHT\" INTEGER," + // 20: height
                "\"ZONE_ID\" INTEGER," + // 21: zoneID
                "\"ZONE_NAME\" TEXT," + // 22: zoneName
                "\"REMARK\" TEXT," + // 23: remark
                "\"IMAGES\" TEXT," + // 24: images
                "\"STATUS\" TEXT," + // 25: status
                "\"STATE\" INTEGER," + // 26: state
                "\"OBJECT_ID\" INTEGER," + // 27: objectID
                "\"POINT_ID\" INTEGER," + // 28: pointId
                "\"TASK_ID\" TEXT," + // 29: taskId
                "\"TASK_POINT_ID\" TEXT," + // 30: taskPointId
                "\"HD_TYPE\" TEXT," + // 31: hdType
                "\"HD_DESC\" TEXT," + // 32: hdDesc
                "\"REV_INT1\" INTEGER," + // 33: revInt1
                "\"REV_INT2\" INTEGER," + // 34: revInt2
                "\"REV_STRING1\" TEXT," + // 35: revString1
                "\"REV_STRING2\" TEXT);"); // 36: revString2
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FACILITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Facility entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(2, guid);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
 
        String oldCode = entity.getOldCode();
        if (oldCode != null) {
            stmt.bindString(5, oldCode);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(6, category);
        }
        stmt.bindString(7, entity.getType());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(8, createTime);
        }
 
        Integer userID = entity.getUserID();
        if (userID != null) {
            stmt.bindLong(9, userID);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(10, userName);
        }
 
        Integer unitID = entity.getUnitID();
        if (unitID != null) {
            stmt.bindLong(11, unitID);
        }
 
        Double x = entity.getX();
        if (x != null) {
            stmt.bindDouble(12, x);
        }
 
        Double y = entity.getY();
        if (y != null) {
            stmt.bindDouble(13, y);
        }
 
        String addrCode = entity.getAddrCode();
        if (addrCode != null) {
            stmt.bindString(14, addrCode);
        }
 
        String lampCode = entity.getLampCode();
        if (lampCode != null) {
            stmt.bindString(15, lampCode);
        }
 
        String ownerPolice = entity.getOwnerPolice();
        if (ownerPolice != null) {
            stmt.bindString(16, ownerPolice);
        }
 
        String monitorCode = entity.getMonitorCode();
        if (monitorCode != null) {
            stmt.bindString(17, monitorCode);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(18, owner);
        }
 
        String ownerOffice = entity.getOwnerOffice();
        if (ownerOffice != null) {
            stmt.bindString(19, ownerOffice);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(20, description);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(21, height);
        }
 
        Integer zoneID = entity.getZoneID();
        if (zoneID != null) {
            stmt.bindLong(22, zoneID);
        }
 
        String zoneName = entity.getZoneName();
        if (zoneName != null) {
            stmt.bindString(23, zoneName);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(24, remark);
        }
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(25, images);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(26, status);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(27, state);
        }
 
        Integer objectID = entity.getObjectID();
        if (objectID != null) {
            stmt.bindLong(28, objectID);
        }
 
        Integer pointId = entity.getPointId();
        if (pointId != null) {
            stmt.bindLong(29, pointId);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(30, taskId);
        }
 
        String taskPointId = entity.getTaskPointId();
        if (taskPointId != null) {
            stmt.bindString(31, taskPointId);
        }
 
        String hdType = entity.getHdType();
        if (hdType != null) {
            stmt.bindString(32, hdType);
        }
 
        String hdDesc = entity.getHdDesc();
        if (hdDesc != null) {
            stmt.bindString(33, hdDesc);
        }
 
        Integer revInt1 = entity.getRevInt1();
        if (revInt1 != null) {
            stmt.bindLong(34, revInt1);
        }
 
        Integer revInt2 = entity.getRevInt2();
        if (revInt2 != null) {
            stmt.bindLong(35, revInt2);
        }
 
        String revString1 = entity.getRevString1();
        if (revString1 != null) {
            stmt.bindString(36, revString1);
        }
 
        String revString2 = entity.getRevString2();
        if (revString2 != null) {
            stmt.bindString(37, revString2);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Facility readEntity(Cursor cursor, int offset) {
        Facility entity = new Facility( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // guid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // address
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // oldCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // category
            cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // createTime
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // userID
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userName
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // unitID
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // x
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // y
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // addrCode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // lampCode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // ownerPolice
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // monitorCode
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // owner
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // ownerOffice
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // description
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // height
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // zoneID
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // zoneName
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // remark
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // images
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // status
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // state
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // objectID
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // pointId
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // taskId
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // taskPointId
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // hdType
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // hdDesc
            cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33), // revInt1
            cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34), // revInt2
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // revString1
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36) // revString2
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Facility entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOldCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCategory(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.getString(offset + 6));
        entity.setCreateTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserID(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setUserName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUnitID(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setX(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setY(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setAddrCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLampCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOwnerPolice(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMonitorCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setOwner(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setOwnerOffice(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setDescription(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setHeight(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setZoneID(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setZoneName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setRemark(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setImages(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setStatus(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setState(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setObjectID(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setPointId(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setTaskId(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setTaskPointId(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setHdType(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setHdDesc(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setRevInt1(cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33));
        entity.setRevInt2(cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34));
        entity.setRevString1(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setRevString2(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Facility entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Facility entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
