package com.yunwei.wetlandpark.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yunwei.wetlandpark.greedao.TrackPoint;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRACK_POINT".
*/
public class TrackPointDao extends AbstractDao<TrackPoint, Long> {

    public static final String TABLENAME = "TRACK_POINT";

    /**
     * Properties of entity TrackPoint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PId = new Property(1, Long.class, "pId", false, "P_ID");
        public final static Property Time = new Property(2, Long.class, "time", false, "TIME");
        public final static Property Lat = new Property(3, Double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(4, Double.class, "lng", false, "LNG");
        public final static Property X = new Property(5, Double.class, "x", false, "X");
        public final static Property Y = new Property(6, Double.class, "y", false, "Y");
        public final static Property Speed = new Property(7, Float.class, "speed", false, "SPEED");
        public final static Property GpsSpeed = new Property(8, Float.class, "gpsSpeed", false, "GPS_SPEED");
        public final static Property Distance = new Property(9, Double.class, "distance", false, "DISTANCE");
        public final static Property Provider = new Property(10, String.class, "provider", false, "PROVIDER");
        public final static Property LocationMode = new Property(11, String.class, "locationMode", false, "LOCATION_MODE");
        public final static Property Address = new Property(12, String.class, "address", false, "ADDRESS");
        public final static Property Revint1 = new Property(13, Integer.class, "revint1", false, "REVINT1");
        public final static Property Revint2 = new Property(14, Integer.class, "revint2", false, "REVINT2");
        public final static Property Revint3 = new Property(15, Integer.class, "revint3", false, "REVINT3");
        public final static Property Revstr1 = new Property(16, String.class, "revstr1", false, "REVSTR1");
        public final static Property Revstr2 = new Property(17, String.class, "revstr2", false, "REVSTR2");
        public final static Property Revstr3 = new Property(18, String.class, "revstr3", false, "REVSTR3");
    };


    public TrackPointDao(DaoConfig config) {
        super(config);
    }
    
    public TrackPointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRACK_POINT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"P_ID\" INTEGER," + // 1: pId
                "\"TIME\" INTEGER," + // 2: time
                "\"LAT\" REAL," + // 3: lat
                "\"LNG\" REAL," + // 4: lng
                "\"X\" REAL," + // 5: x
                "\"Y\" REAL," + // 6: y
                "\"SPEED\" REAL," + // 7: speed
                "\"GPS_SPEED\" REAL," + // 8: gpsSpeed
                "\"DISTANCE\" REAL," + // 9: distance
                "\"PROVIDER\" TEXT," + // 10: provider
                "\"LOCATION_MODE\" TEXT," + // 11: locationMode
                "\"ADDRESS\" TEXT," + // 12: address
                "\"REVINT1\" INTEGER," + // 13: revint1
                "\"REVINT2\" INTEGER," + // 14: revint2
                "\"REVINT3\" INTEGER," + // 15: revint3
                "\"REVSTR1\" TEXT," + // 16: revstr1
                "\"REVSTR2\" TEXT," + // 17: revstr2
                "\"REVSTR3\" TEXT);"); // 18: revstr3
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRACK_POINT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TrackPoint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long pId = entity.getPId();
        if (pId != null) {
            stmt.bindLong(2, pId);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(4, lat);
        }
 
        Double lng = entity.getLng();
        if (lng != null) {
            stmt.bindDouble(5, lng);
        }
 
        Double x = entity.getX();
        if (x != null) {
            stmt.bindDouble(6, x);
        }
 
        Double y = entity.getY();
        if (y != null) {
            stmt.bindDouble(7, y);
        }
 
        Float speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindDouble(8, speed);
        }
 
        Float gpsSpeed = entity.getGpsSpeed();
        if (gpsSpeed != null) {
            stmt.bindDouble(9, gpsSpeed);
        }
 
        Double distance = entity.getDistance();
        if (distance != null) {
            stmt.bindDouble(10, distance);
        }
 
        String provider = entity.getProvider();
        if (provider != null) {
            stmt.bindString(11, provider);
        }
 
        String locationMode = entity.getLocationMode();
        if (locationMode != null) {
            stmt.bindString(12, locationMode);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(13, address);
        }
 
        Integer revint1 = entity.getRevint1();
        if (revint1 != null) {
            stmt.bindLong(14, revint1);
        }
 
        Integer revint2 = entity.getRevint2();
        if (revint2 != null) {
            stmt.bindLong(15, revint2);
        }
 
        Integer revint3 = entity.getRevint3();
        if (revint3 != null) {
            stmt.bindLong(16, revint3);
        }
 
        String revstr1 = entity.getRevstr1();
        if (revstr1 != null) {
            stmt.bindString(17, revstr1);
        }
 
        String revstr2 = entity.getRevstr2();
        if (revstr2 != null) {
            stmt.bindString(18, revstr2);
        }
 
        String revstr3 = entity.getRevstr3();
        if (revstr3 != null) {
            stmt.bindString(19, revstr3);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TrackPoint readEntity(Cursor cursor, int offset) {
        TrackPoint entity = new TrackPoint( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // pId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // lat
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // lng
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // x
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // y
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // speed
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // gpsSpeed
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // distance
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // provider
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // locationMode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // address
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // revint1
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // revint2
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // revint3
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // revstr1
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // revstr2
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // revstr3
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TrackPoint entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setLat(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setLng(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setX(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setY(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setSpeed(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setGpsSpeed(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setDistance(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setProvider(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLocationMode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAddress(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRevint1(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setRevint2(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setRevint3(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setRevstr1(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setRevstr2(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRevstr3(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TrackPoint entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TrackPoint entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
